# 5개의 서로 다른 장애물 시나리오 정의
import random
import math
import time
def generate_random_scenario(scenario_num):
    """랜덤한 장애물 시나리오를 생성하는 함수 (30x30 맵)"""
    
    # 맵 크기 내에서 랜덤한 위치 생성
    positions = []
    min_distance = 5.0  # 장애물 간 최소 거리
    
    # 30x30 맵을 6개의 구역으로 나누기
    zones = [
        (5.0, 15.0, 5.0, 15.0),       # 좌하단
        (15.0, 25.0, 5.0, 15.0),      # 중하단
        (25.0, 30.0, 5.0, 15.0),      # 우하단
        (5.0, 15.0, 15.0, 25.0),      # 좌중단
        (15.0, 25.0, 15.0, 25.0),     # 중중단
        (25.0, 30.0, 15.0, 25.0),     # 우중단
        (5.0, 15.0, 25.0, 30.0),      # 좌상단
        (15.0, 25.0, 25.0, 30.0),     # 중상단
        (25.0, 30.0, 25.0, 30.0),     # 우상단
    ]
    
    # 랜덤하게 5개의 구역 선택
    selected_zones = random.sample(zones, 5)
    
    # 선택된 각 구역에 하나씩 장애물 배치
    for x_min, x_max, y_min, y_max in selected_zones:
        while True:
            x = round(random.uniform(x_min, x_max), 1)
            y = round(random.uniform(y_min, y_max), 1)
            new_pos = (x, y)
            
            valid_position = True
            for pos in positions:
                distance = math.sqrt((pos[0] - x)**2 + (pos[1] - y)**2)
                if distance < min_distance:
                    valid_position = False
                    break
            
            if valid_position:
                positions.append(new_pos)
                break
    
    # 각 장애물의 이동 경로 생성
    targets = []
    for pos in positions:
        path_points = [(pos[0], pos[1])]  # 시작 위치
        
        # 랜덤한 수의 중간 지점 생성 (2~4개)
        num_points = random.randint(2, 4)
        for _ in range(num_points):
            # 이동 반경을 랜덤하게 설정 (3~7)
            radius = random.uniform(3.0, 7.0)
            angle = random.uniform(0, 2 * math.pi)
            
            x = round(pos[0] + radius * math.cos(angle), 1)
            y = round(pos[1] + radius * math.sin(angle), 1)
            
            # 맵 경계 확인 (30x30 맵)
            x = max(5.0, min(35.0, x))  # 5~35 범위로 제한
            y = max(5.0, min(35.0, y))  # 5~35 범위로 제한
            
            path_points.append((x, y))
        
        # 시작 위치로 돌아오기
        path_points.append((pos[0], pos[1]))
        targets.append(path_points)
    
    # 시나리오 출력
    print(f"\n=== Random Scenario {scenario_num} ===")
    
    # 파일로 저장할 내용 생성
    scenario_content = f"""    'scenario_{scenario_num}': {{
        'positions': [
            {positions[0]},  # 장애물 1
            {positions[1]},  # 장애물 2
            {positions[2]},  # 장애물 3
            {positions[3]},  # 장애물 4
            {positions[4]},  # 장애물 5
        ],
        'targets': [
            {targets[0]},
            {targets[1]},
            {targets[2]},
            {targets[3]},
            {targets[4]},
        ]
    }}"""
    
    print(scenario_content)
    
    # 자동 저장
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    filename = f'scenario_{scenario_num}_{timestamp}.txt'
    with open(filename, 'w') as f:
        f.write(scenario_content)
    print(f"\n시나리오가 {filename}에 저장되었습니다.")
    
    return {
        'positions': positions,
        'targets': targets
    }

SCENARIOS = {
    'scenario_1': {
        'positions': [
            (13.0, 6.0),   # 우측
            (7.0, 12.0),   # 좌상단
            (10.0, 9.0),   # 중앙
            (7.0, 6.0),    # 좌하단
            (13.0, 12.0),  # 우상단
        ],
        'targets': [
            [(13.0, 6.0), (13.0, 9.0), (10.0, 9.0), (13.0, 6.0)],
            [(7.0, 12.0), (10.0, 12.0), (10.0, 9.0), (7.0, 12.0)],
            [(10.0, 9.0), (12.0, 9.0), (10.0, 11.0), (10.0, 9.0)],
            [(7.0, 6.0), (10.0, 6.0), (7.0, 9.0), (7.0, 6.0)],
            [(13.0, 12.0), (10.0, 12.0), (13.0, 9.0), (13.0, 12.0)],
        ]
    },
    'scenario_2': {
        'positions': [
            (20.0, 20.0),  # 우상단
            (20.0, 10.0),  # 우중앙
            (10.0, 20.0),  # 좌상단
            (10.0, 10.0),  # 좌중앙
            (15.0, 15.0),  # 중앙
        ],
        'targets': [
            [(20.0, 20.0), (25.0, 20.0), (20.0, 25.0), (20.0, 20.0)],
            [(20.0, 10.0), (25.0, 10.0), (20.0, 15.0), (20.0, 10.0)],
            [(10.0, 20.0), (5.0, 20.0), (10.0, 25.0), (10.0, 20.0)],
            [(10.0, 10.0), (5.0, 10.0), (10.0, 5.0), (10.0, 10.0)],
            [(15.0, 15.0), (20.0, 15.0), (15.0, 20.0), (15.0, 15.0)],
        ]
    },
    'scenario_3': {
        'positions': [
            (5.0, 5.0),    # 좌하단
            (25.0, 5.0),   # 우하단
            (15.0, 15.0),  # 중앙
            (5.0, 25.0),   # 좌상단
            (25.0, 25.0),  # 우상단
        ],
        'targets': [
            [(5.0, 5.0), (10.0, 5.0), (5.0, 10.0), (5.0, 5.0)],
            [(25.0, 5.0), (20.0, 5.0), (25.0, 10.0), (25.0, 5.0)],
            [(15.0, 15.0), (20.0, 15.0), (15.0, 20.0), (15.0, 15.0)],
            [(5.0, 25.0), (10.0, 25.0), (5.0, 20.0), (5.0, 25.0)],
            [(25.0, 25.0), (20.0, 25.0), (25.0, 20.0), (25.0, 25.0)],
        ]
    },
    'scenario_4': {
        'positions': [
            (10.0, 5.0),   # 하단1
            (20.0, 5.0),   # 하단2
            (15.0, 15.0),  # 중앙
            (10.0, 25.0),  # 상단1
            (20.0, 25.0),  # 상단2
        ],
        'targets': [
            [(10.0, 5.0), (15.0, 5.0), (10.0, 10.0), (10.0, 5.0)],
            [(20.0, 5.0), (15.0, 5.0), (20.0, 10.0), (20.0, 5.0)],
            [(15.0, 15.0), (20.0, 15.0), (15.0, 20.0), (15.0, 15.0)],
            [(10.0, 25.0), (15.0, 25.0), (10.0, 20.0), (10.0, 25.0)],
            [(20.0, 25.0), (15.0, 25.0), (20.0, 20.0), (20.0, 25.0)],
        ]
    },
    'scenario_5': {
        'positions': [
            (5.0, 15.0),   # 좌측
            (15.0, 5.0),   # 하단
            (15.0, 15.0),  # 중앙
            (15.0, 25.0),  # 상단
            (25.0, 15.0),  # 우측
        ],
        'targets': [
            [(5.0, 15.0), (10.0, 15.0), (5.0, 20.0), (5.0, 15.0)],
            [(15.0, 5.0), (15.0, 10.0), (20.0, 5.0), (15.0, 5.0)],
            [(15.0, 15.0), (20.0, 15.0), (15.0, 20.0), (15.0, 15.0)],
            [(15.0, 25.0), (15.0, 20.0), (20.0, 25.0), (15.0, 25.0)],
            [(25.0, 15.0), (20.0, 15.0), (25.0, 20.0), (25.0, 15.0)],
        ]
    },
    'scenario_6': {
        'positions': [
            (18.4, 24.9),  
            (19.9, 5.4),  
            (13.2, 23.5),  
            (10.9, 9.7),  
            (17.8, 16.7), 
        ],
        'targets': [
            [(18.4, 24.9), (19.2, 20.2), (14.7, 23.2), (18.4, 24.9)],
            [(19.9, 5.4), (18.0, 5.0), (24.3, 5.0), (19.9, 5.4)],
            [(13.2, 23.5), (16.3, 21.6), (9.0, 24.2), (13.2, 23.5)],
            [(10.9, 9.7), (15.1, 9.7), (14.7, 7.6), (10.9, 9.7)],
            [(17.8, 16.7), (21.2, 16.7), (17.7, 12.2), (17.8, 16.7)],
        ]
    },
    'scenario_7': {
        'positions': [
            (10.4, 17.1),  # ��ֹ� 1
            (17.9, 12.0),  # ��ֹ� 2
            (24.0, 9.2),  # ��ֹ� 3
            (23.9, 21.6),  # ��ֹ� 4
            (19.9, 6.1),  # ��ֹ� 5
        ],
        'targets': [
            [(10.4, 17.1), (9.3, 12.5), (12.1, 14.2), (10.4, 17.1)],
            [(17.9, 12.0), (17.4, 15.5), (19.0, 8.7), (17.9, 12.0)],
            [(24.0, 9.2), (19.9, 10.6), (25.0, 6.2), (24.0, 9.2)],
            [(23.9, 21.6), (19.5, 22.9), (20.7, 18.8), (23.9, 21.6)],
            [(19.9, 6.1), (18.9, 5.0), (17.9, 8.4), (19.9, 6.1)],
        ]
    }
} 


def get_scenario(scenario_num):
    """시나리오 번호에 따라 기존 시나리오 또는 새로운 랜덤 시나리오 반환"""
    if scenario_num <= 7:
        return SCENARIOS[f'scenario_{scenario_num}']
    else:
        return generate_random_scenario(scenario_num)